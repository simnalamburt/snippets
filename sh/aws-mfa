#!/bin/bash
# TODO: By rewriting it in Rust, I can make it a single binary utility with no
# dependencies required.

set -euo pipefail; IFS=$'\n\t'

help () {
  cat <<-'EOF'
aws-mfa
A utility that obtains an AWS CLI access token that has been MFAed.

Usage:
  aws-mfa [<source-profile>] [<destination-profile>] [<token-arn>]
  aws-mfa [-h|--help]

  <source-profile>        aws-mfa performs MFA using this profile. (default: "default")
  <destination-profile>   Result of MFA will be stored into this profile. (default: "<source-profile>-mfa")
  <token-arn>             ARN of virtual MFA device to authenticate. (default: ARN of first virtual MFA device)
  -h, --help              Display this help message

Example:
  aws-mfa
  aws-mfa myprofile
  aws-mfa myprofile mfa-myprofile
  aws-mfa myprofile mfa-myprofile arn:aws:iam::012345678901:mfa/simnalamburt
EOF
}

if (( $# > 3 )); then
  help
  exit 1
fi

if [[ "${1:-}" == '-h' || "${1:-}" == '--help' ]]; then
  help
  exit
fi


#
# Check dependencies
#
for DEP in python3 aws; do
  if ! command -v "$DEP" >/dev/null 2>&1; then
    ABSENT=$DEP
    break
  fi
done
if [[ -n ${ABSENT+x} ]]; then
  echo "'$ABSENT' is not installed."
  exit 1
fi


unset AWS_PROFILE
unset AWS_DEFAULT_PROFILE


#
# Parse ARGV
#
PROFILE_SRC="${1:-default}"
PROFILE_DST="${2:-"${PROFILE_SRC}-mfa"}"
SERIAL_NUMBER="${3:-"$(aws iam list-mfa-devices \
  --query 'MFADevices[].SerialNumber | [0]' \
  --profile "${PROFILE_SRC}" \
  --output text)"}"


#
# Check if existing token is still valid
#
EXPIRATION=$(aws configure get "profile.${PROFILE_DST}.expiration" || true)
# A script that returns 1 only when a new token needs to be issued.
if python3 <<-EOF; then echo 'Nothing was done because a valid token was already issued.' && exit; fi
from sys import exit
from datetime import datetime, timezone

expr = '${EXPIRATION}'
if not expr:
    exit(1)
time = (
    datetime.strptime(expr, '%Y-%m-%dT%H:%M:%S%z')
    if expr[-1] != 'Z' else
    datetime.strptime(expr, '%Y-%m-%dT%H:%M:%SZ').replace(tzinfo=timezone.utc)
)
exit(1 if time <= datetime.now(timezone.utc) else 0)
EOF


#
# Receive OTP codes
#
read -p 'Please enter 6 digits of OTP number: ' -r TOKEN_CODE


#
# Store issued access token
#
JSON=$(
  aws sts get-session-token \
    --duration-seconds 129600 \
    --serial-number "${SERIAL_NUMBER}" \
    --token-code "${TOKEN_CODE}" \
    --profile "${PROFILE_SRC}"
)
aws configure set "profile.${PROFILE_DST}.aws_access_key_id" \
  "$(<<< "$JSON" python3 -c 'import sys,json;print(json.loads(sys.stdin.read())["Credentials"]["AccessKeyId"])')" \
  --profile "${PROFILE_SRC}"
aws configure set "profile.${PROFILE_DST}.aws_secret_access_key" \
  "$(<<< "$JSON" python3 -c 'import sys,json;print(json.loads(sys.stdin.read())["Credentials"]["SecretAccessKey"])')" \
  --profile "${PROFILE_SRC}"
aws configure set "profile.${PROFILE_DST}.aws_session_token" \
  "$(<<< "$JSON" python3 -c 'import sys,json;print(json.loads(sys.stdin.read())["Credentials"]["SessionToken"])')" \
  --profile "${PROFILE_SRC}"
aws configure set "profile.${PROFILE_DST}.expiration" \
  "$(<<< "$JSON" python3 -c 'import sys,json;print(json.loads(sys.stdin.read())["Credentials"]["Expiration"])')" \
  --profile "${PROFILE_SRC}"
echo 'Token renewal is complete.'
